<?xml version="1.0" encoding="utf-8" ?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

<!--    core -->
    <!-- Null -->
    <Type Name="core::Null">
        <DisplayString Optional="true">null</DisplayString>
        <Expand HideRawView="true" />
    </Type>
    <!-- Object -->
    <Type Name="core::Object" Inheritable="true">
        <DisplayString Optional="true"> &lt;object at address {(size_t)this}&gt;</DisplayString>
        <Expand HideRawView="false"/>
    </Type>
    <!-- Boolean -->
    <Type Name="core::Boolean">
        <DisplayString Optional="true">{value}</DisplayString>
        <Expand HideRawView="true">
            <Item Name="Value">value</Item>
        </Expand>
    </Type>
    <!-- Byte -->
    <Type Name="core::Byte">
        <DisplayString Optional="true">{value}</DisplayString>
        <Expand HideRawView="true">
            <Item Name="Value">value</Item>
        </Expand>
    </Type>
    <!-- Short -->
    <Type Name="core::Short">
        <DisplayString Optional="true">{value}</DisplayString>
        <Expand HideRawView="true">
            <Item Name="Value">value</Item>
        </Expand>
    </Type>
    <!-- Character -->
    <Type Name="core::Character">
        <DisplayString Optional="true">{value}</DisplayString>
        <Expand HideRawView="true">
            <Item Name="Value">value</Item>
        </Expand>
    </Type>
    <!-- Integer -->
    <Type Name="core::Integer">
        <DisplayString Optional="true">{value}</DisplayString>
        <Expand HideRawView="true">
            <Item Name="Value">value</Item>
        </Expand>
    </Type>
    <!-- Long -->
    <Type Name="core::Long">
        <DisplayString Optional="true">{value}</DisplayString>
        <Expand HideRawView="true">
            <Item Name="Value">value</Item>
        </Expand>
    </Type>
    <!-- Float -->
    <Type Name="core::Float">
        <DisplayString Optional="true">{value}</DisplayString>
        <Expand HideRawView="true">
            <Item Name="Value">value</Item>
        </Expand>
    </Type>
    <!-- Double -->
    <Type Name="core::Double">
        <DisplayString Optional="true">{value}</DisplayString>
        <Expand HideRawView="true">
            <Item Name="Value">value</Item>
        </Expand>
    </Type>
    <!-- Enum -->
    <Type Name="core::Enum&lt;*&gt;">
        <DisplayString Optional="true">{value, en}</DisplayString>
        <Expand HideRawView="true">
            <Item Name="Value">value</Item>
        </Expand>
    </Type>
    <!-- Throwable -->
    <Type Name="core::Throwable" Inheritable="true">
        <DisplayString Optional="true">{msg}</DisplayString>
        <Expand HideRawView="false">
            <Item Name="Message">msg</Item>
        </Expand>
    </Type>
    <!-- Complex -->
    <Type Name="core::Complex">
        <!-- for non finite imaginary part -->
        <DisplayString Condition="ivalue != ivalue || (1/ivalue == 0.0 &amp;&amp; ivalue &gt; 0)">{rvalue}+({ivalue})i</DisplayString>
        <DisplayString Condition="ivalue != ivalue || (1/ivalue == 0.0 &amp;&amp; ivalue &lt; 0)">{rvalue}-({-ivalue})i</DisplayString>
        <!-- for finite imaginary part -->
        <DisplayString Condition="ivalue &gt;= 0">{rvalue}+{ivalue}i</DisplayString>
        <DisplayString Condition="ivalue &lt; 0">{rvalue}-{-ivalue}i</DisplayString>
        <Expand HideRawView="true">
            <Item Name="Real">rvalue</Item>
            <Item Name="Imaginary">ivalue</Item>
        </Expand>
    </Type>
    <!-- Trace -->
    <Type Name="core::Trace">
        <Expand HideRawView="true">
            <Item Name="Module">{modName}</Item>
            <Item Name="Class">{clsName}</Item>
            <Item Name="Method">{metName}</Item>
            <Item Name="File">{fName}</Item>
            <Item Name="Line">{fLine}</Item>
        </Expand>
    </Type>
    <!-- String -->
    <Type Name="core::String">
        <DisplayString Optional="true" Condition="len == 0 ||value == 0">L""</DisplayString>
        <DisplayString Optional="true">{((wchar_t*) value),sb}</DisplayString>
        <Expand HideRawView="true">
            <Item Optional="true" Name="Length" Condition="len &lt;= 0"> 0 </Item>
            <Item Optional="true" Name="Length" Condition="len &gt;= 0"> len </Item>
            <IndexListItems Optional="true">
                <Size> len </Size>
                <ValueNode Condition="value != 0 &amp;&amp; len &gt; 0"> ((wchar_t*)value)[$i] </ValueNode>
            </IndexListItems>
        </Expand>
    </Type>
    <!-- StringBuffer -->
    <Type Name="core::StringBuffer">
        <DisplayString Optional="true" Condition="len == 0 ||value == 0 || len &gt; cap">L""</DisplayString>
        <DisplayString Optional="true">{((wchar_t*) value),sb}</DisplayString>
        <Expand HideRawView="true">
            <Item Name="Length" Optional="true" Condition="len &lt;= 0 || value == 0 || len &gt; cap"> 0 </Item>
            <Item Name="Length" Optional="true" Condition="len &gt;= 0"> len </Item>
            <IndexListItems Optional="true">
                <Size> len </Size>
                <ValueNode Condition="value != 0 &amp;&amp; len &gt; 0"> ((wchar_t*)value)[$i] </ValueNode>
            </IndexListItems>
        </Expand>
    </Type>

<!--    core.native -->
    <!-- [X]Array/[X]Array2D -->
    <Type Name="core::native::PrimitiveArray&lt;*&gt;" Inheritable="true">
        <DisplayString Optional="true">Size = {len}</DisplayString>
        <Expand HideRawView="true">
            <IndexListItems Optional="true">
                <Size> len </Size>
                <ValueNode Condition="value != 0 &amp;&amp; len &gt; 0">value[$i]</ValueNode>
            </IndexListItems>
        </Expand>
    </Type>
    <!-- ObjectArray/Array<X> -->
    <Type Name="core::native::ObjectArray" Inheritable="true">
        <DisplayString Optional="true">Size = {len}</DisplayString>
        <Expand HideRawView="true">
            <IndexListItems Optional="true">
                <Size> len </Size>
                <ValueNode Condition="value != 0 &amp;&amp; len &gt; 0 &amp;&amp; value[$i] == 0">???</ValueNode>
                <ValueNode Condition="value != 0 &amp;&amp; len &gt; 0">*value[$i]</ValueNode>
            </IndexListItems>
        </Expand>
    </Type>

<!--    core.util -->
    <!-- ArrayList<X> -->
    <Type Name="core::util::ArrayList&lt;*&gt;">
        <DisplayString>Size=len</DisplayString>
        <Expand>
            <IndexListItems Optional="true">
                <Size> len </Size>
                <ValueNode Condition="data != 0 &amp;&amp; len &gt; 0 &amp;&amp; len &lt;= cap &amp;&amp; data[$i] == 0"> ??? </ValueNode>
                <ValueNode Condition="data != 0 &amp;&amp; len &gt; 0 &amp;&amp; len &lt;= cap &amp;&amp; data[$i] != 0"> *data[$i]</ValueNode>
            </IndexListItems>
        </Expand>
    </Type>
    <!-- LinkedList<X>::SubList -->
    <Type Name="core::util::List&lt;*&gt;::SubList&lt;*&gt;">
        <DisplayString Optional="true">Size = {len}</DisplayString>
        <Expand HideRawView="true">
            <!-- LinkedList<X>::SubList (List<X>::SubList)-->
            <CustomListItems Optional="true">
                <Variable Name="first" InitialValue="This.first"/>
                <Variable Name="index" InitialValue="0"/>
                <Loop Condition="index &lt; offset">
                    <Exec>first = first-&gt;next</Exec>
                </Loop>
                <Loop Condition="index + offset &lt; len">
                    <Item>first-&gt;item[0]</Item>
                    <Exec>first = first-&gt;next</Exec>
                </Loop>
            </CustomListItems>
        </Expand>
    </Type>
    <!-- ArrayList<X>::SubList -->
    <Type Name="core::util::ArrayList&lt;*&gt;::SubList&lt;*&gt;">
        <DisplayString Optional="true">Size = {len} </DisplayString>
        <Expand HideRawView="true">
            <IndexListItems Optional="true">
                <Size>len</Size>
                <ValueNode Condition="This.data != 0 &amp;&amp; len &gt; 0 &amp;&amp; This.data[$i + offset] == 0">???</ValueNode>
                <ValueNode Condition="This.data != 0 &amp;&amp; len &gt; 0 &amp;&amp; This.data[$i + offset] != 0">*This.data[$i + offset]</ValueNode>
            </IndexListItems>
        </Expand>
    </Type>
    <!-- LinkedList<X> -->
    <Type Name="core::util::LinkedList&lt;*&gt;">
        <DisplayString>Size = {len} </DisplayString>
        <Expand HideRawView="true">
            <LinkedListItems Optional="true">
                <HeadPointer>first</HeadPointer>
                <NextPointer>next</NextPointer>
                <ValueNode Condition="item == 0">???</ValueNode>
                <ValueNode Condition="item != 0">item[0]</ValueNode>
            </LinkedListItems>
        </Expand>
    </Type>
    <!-- PriorityQueue<X> -->
    <Type Name="core::util::PriorityQueue&lt;*&gt;">
        <DisplayString Optional="true">Size = {len} </DisplayString>
        <Expand HideRawView="true">
            <IndexListItems Optional="true">
                <Size>len</Size>
                <ValueNode Condition="len &gt; 0 &amp;&amp; queue[$i] == 0">???</ValueNode>
                <ValueNode Condition="len &gt; 0 &amp;&amp; queue[$i] != 0">*queue[$i]</ValueNode>
            </IndexListItems>
        </Expand>
    </Type>
    <!-- Map<X, Y>::Entry -->
    <Type Name="core::util::Map&lt;*,*&gt;::Entry" Inheritable="true">
        <DisplayString Optional="true">Map::Entry</DisplayString>
        <Expand HideRawView="true">
            <Item Optional="true" Name="Key" Condition="k == 0">???</Item>
            <Item Optional="true" Name="Key" Condition="k != 0">*k</Item>
            <Item Optional="true" Name="Value" Condition="v == 0">???</Item>
            <Item Optional="true" Name="Value" Condition="v != 0">*v</Item>
        </Expand>
    </Type>
    <!-- TreeMap<X, Y> -->
    <Type Name="core::util::TreeMap&lt;*,*&gt;">
        <DisplayString Optional="true">Size = {len}</DisplayString>
        <Expand HideRawView="true">
            <TreeItems>
                <HeadPointer>root</HeadPointer>
                <LeftPointer>left</LeftPointer>
                <RightPointer>right</RightPointer>
                <ValueNode Condition="this == 0">???</ValueNode>
                <ValueNode Condition="this != 0">*this</ValueNode>
            </TreeItems>
        </Expand>
    </Type>
    <!-- TreeMap<X, Y>::Values -->
    <Type Name="core::util::TreeMap&lt;*,*&gt;::Values">
        <DisplayString Optional="true">Size={This.len}</DisplayString>
        <Expand HideRawView="true">
            <TreeItems>
                <HeadPointer>This.root</HeadPointer>
                <LeftPointer>left</LeftPointer>
                <RightPointer>right</RightPointer>
                <ValueNode Condition="this == 0 || v == 0">???</ValueNode>
                <ValueNode Condition="this != 0 &amp;&amp; v != 0">*v</ValueNode>
            </TreeItems>
        </Expand>
    </Type>
    <!-- TreeMap<X, Y>::KeySet -->
    <Type Name="core::util::TreeMap&lt;*,*&gt;::KeySet">
        <DisplayString Optional="true">Size={This.len}</DisplayString>
        <Expand HideRawView="true">
            <TreeItems>
                <HeadPointer>This.root</HeadPointer>
                <LeftPointer>left</LeftPointer>
                <RightPointer>right</RightPointer>
                <ValueNode>k[0]</ValueNode>
            </TreeItems>
        </Expand>
    </Type>
    <Type Name="core::util::TreeMap&lt;*,*&gt;::EntrySet">
        <DisplayString Optional="true">Size={This.len}</DisplayString>
        <Expand HideRawView="true">
            <TreeItems>
                <HeadPointer>This.root</HeadPointer>
                <LeftPointer>left</LeftPointer>
                <RightPointer>right</RightPointer>
                <ValueNode>this[0]</ValueNode>
            </TreeItems>
        </Expand>
    </Type>
    <Type Name="core::util::TreeMap&lt;*,*&gt;::ReverseKeySet">
        <DisplayString Optional="true">Size={This.len}</DisplayString>
        <Expand HideRawView="true">
            <TreeItems>
                <HeadPointer>This.root</HeadPointer>
                <LeftPointer>right</LeftPointer>
                <RightPointer>left</RightPointer>
                <ValueNode>k[0]</ValueNode>
            </TreeItems>
        </Expand>
    </Type>
    <Type Name="core::util::TreeMap&lt;*,*&gt;::ReverseEntrySet">
        <DisplayString Optional="true">Size={This.len}</DisplayString>
        <Expand HideRawView="true">
            <TreeItems>
                <HeadPointer>This.root</HeadPointer>
                <LeftPointer>right</LeftPointer>
                <RightPointer>left</RightPointer>
                <ValueNode>this[0]</ValueNode>
            </TreeItems>
        </Expand>
    </Type>
    <Type Name="core::util::TreeMap&lt;*,*&gt;::Entry">
        <Expand HideRawView="true">
            <Item Name="key">k[0]</Item>
            <Item Name="value">v[0]</Item>
        </Expand>
    </Type>
    <Type Name="core::util::HashMap&lt;*,*&gt;">
        <DisplayString Optional="true">HashMap[{len}]</DisplayString>
        <Expand HideRawView="true">
            <CustomListItems Optional="true" Condition="len &gt; 0">
                <Variable Name="tab" InitialValue="table"/>
                <Variable Name="index" InitialValue="0"/>
                <Variable Name="e" InitialValue="table[0]"/>

                <If Condition="len &gt;= 0 &amp;&amp; tab != 0">
                    <Loop Condition="index &lt; capacity">
                        <Exec>e = tab[index++]</Exec>
                        <Loop Condition="e != 0">
                            <Item>e[0]</Item>
                            <Exec>e = e-&gt;next</Exec>
                        </Loop>
                    </Loop>
                </If>
            </CustomListItems>
        </Expand>
    </Type>
    <Type Name="core::util::HashMap&lt;*,*&gt;::Node">
        <Expand HideRawView="true">
            <Item Name="hash">hash</Item>
            <Item Name="key">k[0]</Item>
            <Item Name="value">v[0]</Item>
        </Expand>
    </Type>
    <Type Name="core::util::HashMap&lt;*,*&gt;::LinkedEntry">
        <Expand HideRawView="true">
            <Item Name="hash">hash</Item>
            <Item Name="key">k[0]</Item>
            <Item Name="value">v[0]</Item>
        </Expand>
    </Type>
    <Type Name="core::util::HashMap&lt;*,*&gt;::TreeNode">
        <Expand HideRawView="true">
            <Item Name="hash">hash</Item>
            <Item Name="key">k[0]</Item>
            <Item Name="value">v[0]</Item>
        </Expand>
    </Type>
    <Type Name="core::util::HashMap&lt;*,*&gt;::Values">
        <DisplayString Optional="true">Collection[{This.len}]</DisplayString>
        <Expand HideRawView="true">
            <CustomListItems Optional="true" Condition="This.len &gt; 0">
                <Variable Name="tab" InitialValue="This.table"/>
                <Variable Name="index" InitialValue="0"/>
                <Variable Name="e" InitialValue="This.table[0]"/>

                <If Condition="This.len &gt;= 0 &amp;&amp; tab != 0">
                    <Loop Condition="index &lt; This.capacity">
                        <Exec>e = tab[index++]</Exec>
                        <Loop Condition="e != 0">
                            <Item>e-&gt;v[0]</Item>
                            <Exec>e = e-&gt;next</Exec>
                        </Loop>
                    </Loop>
                </If>
            </CustomListItems>
        </Expand>
    </Type>
    <Type Name="core::util::HashMap&lt;*,*&gt;::KeySet">
        <DisplayString Optional="true">Size = {This.len}</DisplayString>
        <Expand HideRawView="true">
            <CustomListItems Optional="true" Condition="This.len &gt; 0">
                <Variable Name="tab" InitialValue="This.table"/>
                <Variable Name="index" InitialValue="0"/>
                <Variable Name="e" InitialValue="This.table[0]"/>

                <If Condition="This.len &gt;= 0 &amp;&amp; tab != 0">
                    <Loop Condition="index &lt; This.capacity">
                        <Exec>e = tab[index++]</Exec>
                        <Loop Condition="e != 0">
                            <Item>e-&gt;k[0]</Item>
                            <Exec>e = e-&gt;next</Exec>
                        </Loop>
                    </Loop>
                </If>
            </CustomListItems>
        </Expand>
    </Type>
    <Type Name="core::util::HashMap&lt;*,*&gt;::EntrySet">
        <DisplayString Optional="true">Size = {This.len}</DisplayString>
        <Expand HideRawView="true">
            <CustomListItems Optional="true" Condition="This.len &gt; 0">
                <Variable Name="tab" InitialValue="This.table"/>
                <Variable Name="index" InitialValue="0"/>
                <Variable Name="e" InitialValue="This.table[0]"/>

                <If Condition="This.len &gt;= 0 &amp;&amp; tab != 0">
                    <Loop Condition="index &lt; This.capacity">
                        <Exec>e = tab[index++]</Exec>
                        <Loop Condition="e != 0">
                            <Item>e[0]</Item>
                            <Exec>e = e-&gt;next</Exec>
                        </Loop>
                    </Loop>
                </If>
            </CustomListItems>
        </Expand>
    </Type>

    <!--    Set<?> -->
    <Type Name="core::util::Set&lt;*&gt;">
        <DisplayString Optional="true">Set[{len}]</DisplayString>
        <DisplayString Optional="true">Set</DisplayString>
        <Expand HideRawView="true"/>
    </Type>
    <Type Name="core::util::TreeSet&lt;*&gt;">
        <DisplayString Optional="true">TreeSet[{m.len}]</DisplayString>
        <Expand HideRawView="true">
            <TreeItems>
                <HeadPointer>m.root</HeadPointer>
                <LeftPointer>left</LeftPointer>
                <RightPointer>right</RightPointer>
                <ValueNode>k[0]</ValueNode>
            </TreeItems>
        </Expand>
    </Type>
    <Type Name="core::util::HashSet&lt;*&gt;">
        <DisplayString Optional="true" Condition="m == 0">Size = 0</DisplayString>
        <DisplayString Optional="true">Size = {(*m).len}</DisplayString>
        <Expand HideRawView="true">
            <CustomListItems Optional="true" Condition="m != 0 &amp;&amp; (*m).len &gt; 0">
                <Variable Name="tab" InitialValue="(*m).table"/>
                <Variable Name="index" InitialValue="0"/>
                <Variable Name="e" InitialValue="(*m).table[0]"/>

                <If Condition="(*m).len &gt;= 0 &amp;&amp; tab != 0">
                    <Loop Condition="index &lt; (*m).capacity">
                        <Exec>e = tab[index++]</Exec>
                        <Loop Condition="e != 0">
                            <Item>e-&gt;k[0]</Item>
                            <Exec>e = e-&gt;next</Exec>
                        </Loop>
                    </Loop>
                </If>
            </CustomListItems>
        </Expand>
    </Type>

    <!--    StringTokenizer -->
    <Type Name="core::util::StringTokenizer">
        <Expand HideRawView="true">
            <Item Name="Target">str</Item>
            <Item Name="Delimiters">delims</Item>
            <Item Name="RetDelimiter">retDelims</Item>
            <Item Name="Cursor">cursor</Item>
        </Expand>
    </Type>

    <!-- directory concurrent -->
    <Type Name="core::util::AtomicInteger">
        <DisplayString Optional="true">{value}</DisplayString>
        <Expand HideRawView="true"/>
    </Type>
    <Type Name="core::util::AtomicLong">
        <DisplayString Optional="true">{value}</DisplayString>
        <Expand HideRawView="true"/>
    </Type>
    <Type Name="core::util::AtomicBoolean">
        <DisplayString Optional="true">{value}</DisplayString>
        <Expand HideRawView="true"/>
    </Type>
    <Type Name="core::util::AtomicReference">
        <DisplayString Optional="true">{*value}</DisplayString>
        <DisplayString Optional="true">null</DisplayString>
        <Expand HideRawView="true"/>
    </Type>
    <Type Name="core::util::AtomicIntegerArray">
        <DisplayString Optional="true">Size = {root.len}</DisplayString>
        <Expand HideRawView="true">
            <IndexListItems Optional="true">
                <Size>root.len</Size>
                <ValueNode>root.value[$i]</ValueNode>
            </IndexListItems>
        </Expand>
    </Type>
    <Type Name="core::util::AtomicLongArray">
        <DisplayString Optional="true">Size = {root.len}</DisplayString>
        <Expand HideRawView="true">
            <IndexListItems Optional="true">
                <Size>root.len</Size>
                <ValueNode>root.value[$i]</ValueNode>
            </IndexListItems>
        </Expand>
    </Type>
    <Type Name="core::util::AtomicReferenceArray">
        <DisplayString Optional="true">Size = {root.len}</DisplayString>
        <Expand HideRawView="true">
            <IndexListItems Optional="true">
                <Size>root.len</Size>
                <ValueNode Condition="root.value[$i] == 0">???</ValueNode>
                <ValueNode Condition="root.value[$i] != 0">*root.value[$i]</ValueNode>
                <ValueNode>null</ValueNode>
            </IndexListItems>
        </Expand>
    </Type>
    <!-- directory function -->
    <!-- directory random -->
    <!-- directory regex -->

<!--    namespace core.io -->

    <!-- File -->
    <Type Name="core::io::File">
        <DisplayString Optional="true">{pathname}</DisplayString>
    </Type>

    <!-- NTFS -->
    <Type Name="core::io::NTFS">
        <DisplayString Optional="true">NTFS</DisplayString>
        <Expand HideRawView="true"/>
    </Type>

    <!-- FileArray -->
    <Type Name="core::io::FileArray">
        <DisplayString Optional="true">File[{len}]</DisplayString>
        <Expand HideRawView="true">
            <IndexListItems>
                <Size>len</Size>
                <ValueNode>value[$i]</ValueNode>
            </IndexListItems>
        </Expand>
    </Type>

    <!-- Buffer -->
    <Type Name="core::io::Buffer" Inheritable="true">
        <Expand HideRawView="true">
            <Item Name="mark" Condition="mark &gt;= 0" Optional="true">mark</Item>
            <Item Name="position" Condition="mark &gt;= 0" Optional="true">pos</Item>
            <Item Name="limit" Condition="mark &gt;= 0" Optional="true">lim</Item>
            <Item Name="capacity" Condition="mark &gt;= 0" Optional="true">cap</Item>
            <Item Name="content" Optional="true">hb[0]</Item>
            <Item Name="address" Optional="true">address</Item>
        </Expand>
    </Type>

    <!-- NativeBuffer -->
    <Type Name="core::io::NativeBuffer" Inheritable="true">
        <DisplayString Optional="true">Capacity={sizeInBytes}</DisplayString>
        <Expand HideRawView="true">
            <ArrayItems Optional="true">
                <Size>sizeInBytes</Size>
                <ValuePointer Condition="memoryAddress != 0">(char*)memoryAddress</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>

<!--    core.charset -->
    <!-- Charset -->
    <Type Name="core::charset::Charset" Inheritable="true">
        <DisplayString Optional="true">Name={canonicalName}</DisplayString>
        <Expand HideRawView="true"/>
    </Type>
    <Type Name="core::charset::CoderResult" Inheritable="true">
        <DisplayString Optional="true" Condition="t==0">UNDERFLOW</DisplayString>
        <DisplayString Optional="true" Condition="t==1">OVERFLOW</DisplayString>
        <DisplayString Optional="true" Condition="t==2">MALFORMED[Size={len}]</DisplayString>
        <DisplayString Optional="true" Condition="t==3">UNMAPPABLE[Size={len}]</DisplayString>
        <Expand HideRawView="true"/>
    </Type>
    <Type Name="core::charset::charsetEncoder" Inheritable="true">
        <DisplayString Optional="true">Encoder[{cs}]</DisplayString>
        <Expand HideRawView="true"/>
    </Type>
    <Type Name="core::charset::charsetDecoder" Inheritable="true">
        <DisplayString Optional="true">Decoder[{cs}]</DisplayString>
        <Expand HideRawView="true"/>
    </Type>

<!--    core.time -->
    <!-- Chrono -->
    <Type Name="core::time::chrono">
        <DisplayString Optional="true" Conditon="seconds &lt; 0 || nanos &lt; 0"> Stop </DisplayString>
        <DisplayString Optional="true"> Running... </DisplayString>
    </Type>

</AutoVisualizer>
